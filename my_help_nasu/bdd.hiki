ビヘイビア駆動開発(振舞駆動開発; behavior driven development; BDD)とは，プログラム開発手法の一種で，テスト駆動開発から派生した物である．

テスト駆動開発で記述されるテストケースは，作成したプログラムの動作が正しいかどうかを検証するために行う「テスト」である．
テストであるという点は同一であるが，加えて，これから作成しようとするプログラムに期待される「振る舞い」や「制約条件」，つまり「要求仕様」に近い形で，
自然言語を併記しながらテストコードを記述する．テストフレームワークのメソッド名も自然言語(英語など)に近い形をとっている．
テストコードの可読性があがる上，テストコードが要求仕様からテストコードを起こすさいも，スムーズにコードに移行しやすい．
BDDではスペック(仕様)とテストは限りなく近い物である．
従って，テスト駆動開発における「テストファースト」は，BDDにおいては「スペックファースト」となり，スペックを作ってから実装するという，より自然な形でのプログラム制作を実現している．

　BDDは構造ではなく振る舞いに焦点を合わせます．
それは開発のすべてのレベルでいっかんしてそうなります．
２つの都市の間の距離を計算するオブジェクトのことであっても，サードパーティのサービスに検索を委任する別のオブジェクトのことであっても，
あるいはユーザーが無効なデータを入力したときにフィードバックを提供する別の画面であっても，それはすべて振る舞いなのです．
これを飲み込んでしまえば，コードに取り組むときの考え方が変わります．
オブジェクトの構造よりも，ユーザーとシステムの間でのやり取り，つまりオブジェクトの間でのやり取りについて考えるようになります．

　ソフトウェア開発チームが直面する問題のほとんどは，コミュニケーションの問題であると考えています．
BDDの目的は，ソフトウェアが使われる状況を説明するための言語を単純かすることで，コミュニケーションを後押しすることです．
つまり，あるコンテキストで(Given)，あるイベントが発生すると(When)，ある結果が期待されます(Then)．
BDDにおけるGiven, When,Thenの３つの単語は，アプリケーションやオブジェクトを，それらの振る舞いに関係なく表現するために使われる単純な単語です．
ビジネスアナリスト，テスト担当者，開発者は皆，それらをすぐに理解します．
これらの単語はCucumberの言語に直接埋め込まれています．