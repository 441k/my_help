{{toc}}
!!BDDにしたがったcode記述の手順

実際にBDDを使ってコードを書く流れを説明する．
// アプリの振る舞いを説明する
// なぜ自分が作ったかを納得してもらえないから．
// 自分の作業の目的の意義を説明するために，全体の概要を説明することは妥当
// 先行研究->先行開発，ソフト開発==研究，why!!
ここでは，卒業研究の目的の意義を理解してもらうために，全体の概要を説明する．
!todoを更新するときのマニュアル
#my_todo --editを入力して~/.my_help/my_todo.ymlを開く
#todoを書き込む（今週やることならweeklyというitemを作ってそこに書き込む）
#保存して~/.my_help/my_todo.ymlを閉じる
#my_todoと打ち込んで更新されていたら完成
#my_todo --store [item]を入力してitemのバックアップをとる

これを実際に振る舞いがきちんとできているのかをテストする．

!Cucumber

以下はtodoの更新を行うときのfeatureである．
#適当なディレクトリにfeaturesというディレクトリを作成する．
#そのfeaturesディレクトリにmy_todo.featureを作成する．
<<< feature

# language: ja #言語の設定（ここでは日本語に設定している）

機能: todoの更新を行う
todoは更新していくものであり,新しく書いたり終わったものを\\
消したいのでバックアップをとって，過去のtodoを残しておく

シナリオ: コマンドを入力してtodoを更新していく
          前提 todoを編集したい
          もし "my_todo --edit"と入力する
          ならば editが開かれる
          かつ 自分のtodoを書き込む

シナリオ: コマンドを入力してバックアップをとる
          前提 todoの編集が終わった
          もし "my_todo --store [item]"と入力する
          ならば itemのバックアップを取る

>>>

　featureを書けたら次はcucumberを実行してみる

<<<
/Users/nasubi/nasu% cucumber features/my_todo.feature 
# language: ja
機能: todoの更新を行う
todoは更新していくものであり,新しく書いたり終わったものを消したいのでバックアップをとって，過去のtodoを残しておく

  シナリオ: コマンドを入力してtodoを更新していく # features/my_todo.feature:6
    前提todoを編集したい             # features/my_todo.feature:7
    もし"my_todo --edit"と入力する  # features/my_todo.feature:8
    ならばeditが開かれる             # features/my_todo.feature:9
    かつ自分のtodoを書き込む           # features/my_todo.feature:10

  シナリオ: コマンドを入力してバックアップをとる          # features/my_todo.feature:12
    前提todoの編集が終わった                  # features/my_todo.feature:13
    もし"my_todo --store [item]"と入力する # features/my_todo.feature:14
    ならばitemのバックアップを取る               # features/my_todo.feature:15

2 scenarios (2 undefined)
7 steps (7 undefined)
0m0.080s

You can implement step definitions for undefined steps with these snippets:

前提(/^todoを編集したい$/) do
  pending # Write code here that turns the phrase above into concrete actions
end

もし(/^"([^"]*)"と入力する$/) do |arg1|
  pending # Write code here that turns the phrase above into concrete actions
end

ならば(/^editが開かれる$/) do
  pending # Write code here that turns the phrase above into concrete actions
end

ならば(/^自分のtodoを書き込む$/) do
  pending # Write code here that turns the phrase above into concrete actions
end

前提(/^todoの編集が終わった$/) do
  pending # Write code here that turns the phrase above into concrete actions
end

ならば(/^itemのバックアップを取る$/) do
  pending # Write code here that turns the phrase above into concrete actions
end


>>>
と表示される．

次にfeaturesディレクトリの中でstep_definitionsディレクトリを作成する．
step_definitionsディレクトリの中にmy_todo_spec.rbを作成する．
中身は以下の通りである．
<<< my_todo_spec.rb
前提(/^todoを編集したい$/) do
  pending # Write code here that turns the phrase above into concrete actions          
end

もし(/^"([^"]*)"と入力する$/) do |arg1|
  pending # Write code here that turns the phrase above into concrete actions          
end

ならば(/^editが開かれる$/) do
  pending # Write code here that turns the phrase above into concrete actions          
end

ならば(/^自分のtodoを書き込む$/) do
  pending # Write code here that turns the phrase above into concrete actions          
end

前提(/^todoの編集が終わった$/) do
  pending # Write code here that turns the phrase above into concrete actions          
end

ならば(/^itemのバックアップを取る$/) do
  pending # Write code here that turns the phrase above into concrete actions          
end

>>>

ここでもう一度cucumberを実行してみると
<<<
/Users/nasubi/nasu% cucumber features/my_todo.feature 
# language: ja
機能: todoの更新を行う
todoは更新していくものであり,新しく書いたり終わったものを消したいのでバックアップをとって，過去のtodoを残しておく

  シナリオ: コマンドを入力してtodoを更新していく # features/my_todo.feature:6
    前提todoを編集したい             # features/step_definitions/my_todo_spec.rb:1
      TODO (Cucumber::Pending)
      ./features/step_definitions/my_todo_spec.rb:2:in `/^todoを編集したい$/'
      features/my_todo.feature:7:in `前提todoを編集したい'
    もし"my_todo --edit"と入力する  # features/step_definitions/my_todo_spec.rb:5
    ならばeditが開かれる             # features/step_definitions/my_todo_spec.rb:9
    かつ自分のtodoを書き込む           # features/step_definitions/my_todo_spec.rb:13

  シナリオ: コマンドを入力してバックアップをとる          # features/my_todo.feature:12
    前提todoの編集が終わった                  # features/step_definitions/my_todo_spec.rb:17
      TODO (Cucumber::Pending)
      ./features/step_definitions/my_todo_spec.rb:18:in `/^todoの編集が終わった$/'
      features/my_todo.feature:13:in `前提todoの編集が終わった'
    もし"my_todo --store [item]"と入力する # features/step_definitions/my_todo_spec.rb:5
    ならばitemのバックアップを取る               # features/step_definitions/my_todo_spec.rb:21

2 scenarios (2 pending)
7 steps (5 skipped, 2 pending)
0m0.045s

>>>
と変化が出てくる．
2 scenarios (2 pending)
7 steps (5 skipped, 2 pending)
これは2つのシナリオの内２つがpendingであり，７つのstepの内２つがpendingで５つがskipしたことを表している．
step_definitionsのmy_todo_spec.rbのpending部分を書き換えて進行していく．

cucumberが成功すると下記のような結果となる．

<<< cucumber
/Users/nasubi/my_help% cucumber features/my_todo.feature 
# language: ja
機能: todoの更新を行う
todoは更新していくものであり,新しく書いたり終わったものを消したいのでバックアップをとって，過去のtodoを残しておく

  シナリオ: コマンドを入力してtodoを更新していく # features/my_todo.feature:6
    前提todoを編集したい             # features/step_definitions/my_todo_spec.rb:2
    もし"my_todo --edit"と入力する  # features/step_definitions/my_todo_spec.rb:6
    ならばeditが開かれる             # features/step_definitions/my_todo_spec.rb:10
    かつ自分のtodoを書き込む           # features/step_definitions/my_todo_spec.rb:14

  シナリオ: コマンドを入力してバックアップをとる          # features/my_todo.feature:12
    前提todoの編集が終わった                  # features/step_definitions/my_todo_spec.rb:18
    もし"my_todo --store [item]"と入力する # features/step_definitions/my_todo_spec.rb:6
    ならばitemのバックアップを取る               # features/step_definitions/my_todo_spec.rb:22

2 scenarios (2 passed)
7 steps (7 passed)
0m0.030s

>>>

ここでcucumberを実行すると全て成功しているのがわかります．
<<< cucumber
/Users/nasubi/my_help% cucumber features/my_todo.feature              
# language: ja
機能: todoの更新を行う
todoは更新していくものであり,新しく書いたり終わったものを消したいのでバックアップをとって，過去のtodoを残しておく

  シナリオ: コマンドを入力してtodoを更新していく # features/my_todo.feature:6
    前提todoを編集したい             # features/step_definitions/my_todo_spec.rb:2
    もし"my_todo --edit"と入力する  # features/step_definitions/my_todo_spec.rb:6
    ならばeditが開かれる             # features/step_definitions/my_todo_spec.rb:10
    かつ自分のtodoを書き込む           # features/step_definitions/my_todo_spec.rb:14

  シナリオ: コマンドを入力してバックアップをとる          # features/my_todo.feature:12
    前提todoの編集が終わった                  # features/step_definitions/my_todo_spec.rb:18
    もし"my_todo --store [item]"と入力する # features/step_definitions/my_todo_spec.rb:6
    ならばitemのバックアップを取る               # features/step_definitions/my_todo_spec.rb:22

2 scenarios (2 passed)
7 steps (7 passed)
0m0.029s

>>>

!RSpec
次にRSpecを使って実際にtodoを更新する振る舞いをするコード書いていく．

そのための準備として，まずspecというディレクトリを作成し，my_todoというサブディレクトリを追加する．
次に，このサブディレクトリにtodo_spec.rbというファイルを追加する．
作業を進める過程で，lib/my_todo/my_todo.rbソースファイルとspec/my_todo/todo_spec.rbスペックファイルが１対１に対応するといった要領で，
並列のディレクトリ構造を築いていく．
この機能はmy_help --editと入力されれば，~/.my_help/my_todo.ymlが開かれるのでその振る舞いをするコードを書きます．
まずtodo_spec.rbは下記の通りになります

<<< todo_spec.rb
require 'spec_helper'


module Mytodo
  describe Todo do
    describe "#open" do
      it "open file my_todo.yml" 
    end
  end
end

>>>

describe()メソッドは，RSpecのAPIにアクセスしてRSpec::Core::ExampleGroupのサブクラスを返します．
ExampleGroupクラスはオブジェクトに期待される振る舞いのサンプルを示すグループです．
it()メソッドはサンプルを作成します．

このスペックを実行するために，specディレクトリにspec_helper.rbを追加します．
中身は下記の通りです．

<<< spec_helper.rb
$LOAD_PATH.unshift File.expand_path('../../lib', __FILE__)
require 'my_help'
require 'todo'
>>>

これで事前準備は完成でコードを書いていきます．

完成したコードを下記の通りです．

<<< todo_spec.rb
require 'spec_helper'


module Mytodo
  describe Todo do
    describe "#open" do
      it "open file my_todo.yml" do
          system("emacs ~/.my_help/my_todo.yml")
      end
    end
  end
end

>>>

これでrspecを実行すると以下のような結果が表示される．
<<< rspec
/Users/nasubi/my_help% rspec spec --color

my_help command
  version option
    should be successfully executed
    should have output: "my_help 0.4.3"
  help option
    should be successfully executed
    should have output: "Usage: my_help [options]\n    -v, --version                    show program Version.\n    -l, --list...              install local after edit helps\n        --delete NAME                delete NAME help"

Mytodo::Todo
  #open
    open file my_todo.yml

Finished in 3.87 seconds (files took 0.30703 seconds to load)
5 examples, 0 failures

>>>
これでtodoを更新するときの振る舞いのテストはうまく成功した．

この方法でBDDでmy_helpのテスト開発を行い，仕様を決定していった．