　cucumberとは．．．
　BDDはフルスタックのアジャイル開発技法です．BDDはATDP(Acceptance Test-Driven Planning)と呼ばれるAcceptance TDDの一種を含め，エクストリームプログラミングからヒントを得ています．
ATDPでは，顧客受け入れテストを導入し，それを主体にコードの開発を進めて行きます．それらは顧客と開発チームによる共同作業の結果であることが理想的です．開発チームによってテストが書かれた後，顧客がレビューと承認を行うこともあります．いずれにしても，それらのテストは顧客と向き合うものなので，顧客が理解できる言語とフォーマットで表現されていなければなりません．Cucumberを利用すれば，そのための言語とフォーマットを手に入れることができます．
Cucumberは，アプリケーションの機能とサンプルシナリオを説明するテキストを読み取り，そのシナリオの手順に従って開発中のコードとのやり取りを自動化します．
下記に例を示しています．
<<< feature
# language: ja

機能: todoの更新を行う
todoは更新していくものであり,新しく書いたり終わったものを消したいのでバッ\
クアップをとって，過去のtodoを残しておく

シナリオ: コマンドを入力してtodoを更新していく
          前提 todoを編集したい
          もし "my_todo --edit"と入力する
          ならば editが開かれる
          かつ 自分のtodoを書き込む

シナリオ: コマンドを入力してバックアップをとる
          前提 todoの編集が終わった
          もし "my_todo --store [item]"と入力する
          ならば itemのバックアップを取る
>>>
　このように日本語でシナリオを書くことができ，顧客にもわかりやすく，開発者も書きやすくなっている．

　featureファイルに書くキーワードは下記の通りになっている．
 | feature          | "フィーチャ", "機能"                                  |
  | background       | "背景"                                           |
  | scenario         | "シナリオ"                                         |
  | scenario_outline | "シナリオアウトライン", "シナリオテンプレート", "テンプレ", "シナリオテンプレ" |
  | examples         | "例", "サンプル"                                    |
  | given            | "* ", "前提"                                     |
  | when             | "* ", "もし"                                     |
  | then             | "* ", "ならば"                                    |
  | and              | "* ", "かつ"                                     |
  | but              | "* ", "しかし", "但し", "ただし"                       |
  | given (code)     | "前提"                                           |
  | when (code)      | "もし"                                           |
  | then (code)      | "ならば"                                          |
  | and (code)       | "かつ"                                           |
  | but (code)       | "しかし", "但し", "ただし"                             |
